#!/bin/bash

## default x509 info
X509_C="${X509_C:-ES}"
X509_ST="${X509_ST:-Aragon}"
X509_L="${X509_L:-Zaragoza}"


## It's required to create certificates with time before execution. This is because fabric-ca-server builds 
## certificates with a lifetime of 5 minutes before run. Without this hack, certs generated by fabric will be invalid.
defined __STARTDATERCA || __STARTDATERCA=$(date -d '1 hour ago' -u +%Y%m%d%H%M%SZ)
defined __STARTDATEICA || __STARTDATEICA=$(date -d '30 minutes ago' -u +%Y%m%d%H%M%SZ)

## create workdir
defined __OPENSSL_WORKDIR || __OPENSSL_WORKDIR=$(pwd)/openssl
mkdir -p $__OPENSSL_WORKDIR


function createRootCA() {
    [ $# -eq 2 ] || die "$FUNCNAME: invalid number of params"
    local ca_code=$1
    local org_name="$2"
    local retcode=0
    
    [ -d $__OPENSSL_WORKDIR/${ca_code} ] && return 1
    
    mkdir -p $__OPENSSL_WORKDIR/${ca_code}
    pushd $__OPENSSL_WORKDIR/${ca_code} >/dev/null
    __createDefaultCAconf ca.cnf
    echo 1000 > serial
    echo 1000 > crlnumber
    touch index.txt
    
    openssl ecparam -name prime256v1 -genkey -noout -out ca.key && \
        openssl req -new -sha256 -key ca.key -out ca.csr \
            -subj "/C=${X509_C}/ST=${X509_ST}/L=${X509_L}/O=${org_name}/CN=${org_name} Root CA $ca_code" && \
        openssl ca -batch -config ca.cnf -selfsign -extensions v3_ca -keyfile ca.key -notext -md sha256 -in ca.csr -out ca.crt \
            -startdate $__STARTDATERCA -days 3650
    retcode=$?
    popd >/dev/null

    return $retcode
}


function createIntermediateCA() {
    [ $# -eq 3 ] || die "$FUNCNAME: invalid number of params"
    local ca_code=$1
    local org_name="$2"
    local root_ca_code=$3
    local retcode=0
    
    [ -d $__OPENSSL_WORKDIR/${ca_code} ] && return 1

    mkdir -p $__OPENSSL_WORKDIR/${ca_code}
    pushd $__OPENSSL_WORKDIR/${ca_code} >/dev/null

    __createDefaultCAconf ca.cnf
    echo 1000 > serial
    echo 1000 > crlnumber
    touch index.txt
    
    openssl ecparam -name prime256v1 -genkey -noout -out ca.key && \
        openssl req -new -sha256 -key ca.key -out ca.csr \
            -subj "/C=${X509_C}/ST=${X509_ST}/L=${X509_L}/O=${org_name}/CN=${org_name} Intermediate CA $ca_code"
    retcode=$?
    popd >/dev/null
    [ $retcode -eq 0 ] || return $retcode
    
    ## copy csr to rootca dir
    cp $__OPENSSL_WORKDIR/${ca_code}/ca.csr $__OPENSSL_WORKDIR/${root_ca_code}/${ca_code}.csr
    pushd $__OPENSSL_WORKDIR/${root_ca_code} >/dev/null
    
    openssl ca -batch -config ca.cnf -extensions v3_intermediate_ca -notext -md sha256 -in ${ca_code}.csr -out ${ca_code}.crt \
        -startdate $__STARTDATEICA -days 1850
    retcode=$?
    cat ${ca_code}.crt ca.crt > ${ca_code}-chain.crt
    popd >/dev/null
    [ $retcode -eq 0 ] || return $retcode
    
    cp $__OPENSSL_WORKDIR/${root_ca_code}/${ca_code}.crt $__OPENSSL_WORKDIR/${ca_code}/ca.crt
    cp $__OPENSSL_WORKDIR/${root_ca_code}/${ca_code}-chain.crt $__OPENSSL_WORKDIR/${ca_code}/chain.crt
}

function getCAPath() {
    [ $# -eq 1 ] || die "$FUNCNAME: invalid number of params"
    local ca_code=$1

    [ -d $__OPENSSL_WORKDIR/${ca_code} ] && echo -n "$__OPENSSL_WORKDIR/${ca_code}" && return 0
    return 1
}

function getCACertPath() {
    [ $# -eq 1 ] || die "$FUNCNAME: invalid number of params"
    local ca_code=$1

    [ -f $__OPENSSL_WORKDIR/${ca_code}/ca.crt ] && echo -n "$__OPENSSL_WORKDIR/${ca_code}/ca.crt" && return 0
    return 1
}

function getCAKeyPath() {
    [ $# -eq 1 ] || die "$FUNCNAME: invalid number of params"
    local ca_code=$1
    
    [ -f $__OPENSSL_WORKDIR/${ca_code}/ca.key ] && echo -n "$__OPENSSL_WORKDIR/${ca_code}/ca.key" && return 0
    return 1
}

function existsCA() {
    [ $# -eq 1 ] || die "$FUNCNAME: invalid number of params"
    [ -d "$__OPENSSL_WORKDIR/${ca_code}" ]
}


function __createDefaultCAconf() {
    [ $# -eq 1 ] || die "$FUNCNAME: output file param is required"
    
    local outfile=$1
    cat <<"EOF" > $outfile
[ ca ]
# `man ca`
default_ca = CA_default

[ CA_default ]
# Directory and file locations.
dir               = .
certs             = $dir
crl_dir           = $dir
new_certs_dir     = $dir
database          = $dir/index.txt
serial            = $dir/serial
 RANDFILE          = $dir/.rand

# The root key and root certificate.
private_key       = $dir/ca.key
certificate       = $dir/ca.crt

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/ca.crl
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha512

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_strict

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
organizationName        = match
localityName            = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_loose ]
# Allow the intermediate CA to sign a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 4096
distinguished_name  = req_distinguished_name
string_mask         = utf8only

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha512

# Extension to add when the -x509 option is used.
x509_extensions     = v3_ca

[ req_distinguished_name ]
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name
emailAddress                    = Email Address

# Optionally, specify some defaults.
#countryName_default             = [2 letter contry code]
#stateOrProvinceName_default     = [State or Province]
#localityName_default            = [City or Town]
#0.organizationName_default      = [Name of the organization]
#organizationalUnitName_default  = [Unit]
#emailAddress_default            = [your email address]

[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ usr_cert ]
# Extensions for client certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection

[ server_cert ]
# Extensions for server certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning

EOF
}

