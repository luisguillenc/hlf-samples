
version: '3'

volumes:
  orderer:
  couchdb0-org1:
  couchdb1-org1:
  couchdb2-org1:
  couchdb0-org2:
  couchdb1-org2:
  couchdb2-org2:
  peer0-org1:
  peer1-org1:
  peer2-org1:
  peer0-org2:
  peer1-org2:
  peer2-org2:
  pgdata:

networks:
  test:

services:

  orderer.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_orderer
    hostname: orderer
    domainname: example.com
    image: hyperledger/fabric-orderer:$IMAGE_TAG
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
    command: orderer
    volumes:
        - ./etc/orderer:/etc/hyperledger/fabric
        - orderer:/var/hyperledger/production/orderer
    networks:
      - test

  couchdb0.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_couchdb0-org1
    hostname: couchdb0
    domainname: org1.example.com
    image: couchdb:3.1.1
    # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password
    # for CouchDB.  This will prevent CouchDB from operating in an "Admin Party" mode.
    environment:
      - COUCHDB_USER=admin
      - COUCHDB_PASSWORD=adminpw
    # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
    # for example map it to utilize Fauxton User Interface in dev environments.
    volumes:
        - couchdb0-org1:/opt/couchdb/data
    ports:
      - "5984:5984"
    networks:
      - test

  peer0.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_peer0-org1
    hostname: peer0
    domainname: org1.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      # Peer specific variabes
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_LOCALMSPID=Org1MSP
      # CouchDB related configuration
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0.org1.example.com:5984
      # The CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME and CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD
      # provide the credentials for ledger to connect to CouchDB.  The username and password must
      # match the username and password set for the associated CouchDB.
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw
      # prometheus metrics
      - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9443
      - CORE_METRICS_PROVIDER=prometheus
    depends_on:
      - couchdb0.org1.example.com
    volumes:
        - /var/run/docker.sock:/host/var/run/docker.sock
        - ./etc/peer0-org1:/etc/hyperledger/fabric
        - peer0-org1:/var/hyperledger/production
    command: peer node start
    networks:
      - test

  couchdb1.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_couchdb1-org1
    hostname: couchdb1
    domainname: org1.example.com
    image: couchdb:3.1.1
    environment:
      - COUCHDB_USER=admin
      - COUCHDB_PASSWORD=adminpw
    volumes:
        - couchdb1-org1:/opt/couchdb/data
    networks:
      - test
      
  peer1.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_peer1-org1
    hostname: peer1
    domainname: org1.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      # Peer specific variabes
      - CORE_PEER_ID=peer1.org1.example.com
      - CORE_PEER_ADDRESS=peer1.org1.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer1.org1.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7051
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_LOCALMSPID=Org1MSP
      # CouchDB related configuration
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb1.org1.example.com:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw
      # prometheus metrics
      - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9443
      - CORE_METRICS_PROVIDER=prometheus
    depends_on:
      - couchdb1.org1.example.com
    volumes:
        - /var/run/docker.sock:/host/var/run/docker.sock
        - ./etc/peer1-org1:/etc/hyperledger/fabric
        - peer1-org1:/var/hyperledger/production
    command: peer node start
    networks:
      - test

  couchdb2.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_couchdb2-org1
    hostname: couchdb2
    domainname: org1.example.com
    image: couchdb:3.1.1
    environment:
      - COUCHDB_USER=admin
      - COUCHDB_PASSWORD=adminpw
    volumes:
        - couchdb2-org1:/opt/couchdb/data
    networks:
      - test
      
  peer2.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_peer2-org1
    hostname: peer2
    domainname: org1.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      # Peer specific variabes
      - CORE_PEER_ID=peer2.org1.example.com
      - CORE_PEER_ADDRESS=peer2.org1.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer2.org1.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer2.org1.example.com:7051
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_LOCALMSPID=Org1MSP
      # CouchDB related configuration
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb2.org1.example.com:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw
      # prometheus metrics
      - CORE_OPERATIONS_LISTENADDRESS=0.0.0.0:9443
      - CORE_METRICS_PROVIDER=prometheus
    depends_on:
      - couchdb2.org1.example.com
    volumes:
        - /var/run/docker.sock:/host/var/run/docker.sock
        - ./etc/peer2-org1:/etc/hyperledger/fabric
        - peer2-org1:/var/hyperledger/production
    command: peer node start
    networks:
      - test

  couchdb0.org2.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_couchdb0-org2
    hostname: couchdb0
    domainname: org2.example.com
    image: couchdb:3.1.1
    environment:
      - COUCHDB_USER=admin
      - COUCHDB_PASSWORD=adminpw
    volumes:
        - couchdb0-org2:/opt/couchdb/data
    networks:
      - test
      
  peer0.org2.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_peer0-org2
    hostname: peer0
    domainname: org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      # Peer specific variabes
      - CORE_PEER_ID=peer0.org2.example.com
      - CORE_PEER_ADDRESS=peer0.org2.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org2.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:7051
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_LOCALMSPID=Org2MSP
      # CouchDB related configuration
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0.org2.example.com:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw
    depends_on:
      - couchdb0.org2.example.com
    volumes:
        - /var/run/docker.sock:/host/var/run/docker.sock
        - ./etc/peer0-org2:/etc/hyperledger/fabric
        - peer0-org2:/var/hyperledger/production
    command: peer node start
    networks:
      - test

  couchdb1.org2.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_couchdb1-org2
    hostname: couchdb1
    domainname: org2.example.com
    image: couchdb:3.1.1
    environment:
      - COUCHDB_USER=admin
      - COUCHDB_PASSWORD=adminpw
    volumes:
        - couchdb1-org2:/opt/couchdb/data
    networks:
      - test
      
  peer1.org2.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_peer1-org2
    hostname: peer1
    domainname: org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      # Peer specific variabes
      - CORE_PEER_ID=peer1.org2.example.com
      - CORE_PEER_ADDRESS=peer1.org2.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer1.org2.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org2.example.com:7051
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_LOCALMSPID=Org2MSP
      # CouchDB related configuration
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb1.org2.example.com:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw
    depends_on:
      - couchdb1.org2.example.com
    volumes:
        - /var/run/docker.sock:/host/var/run/docker.sock
        - ./etc/peer1-org2:/etc/hyperledger/fabric
        - peer1-org2:/var/hyperledger/production
    command: peer node start
    networks:
      - test

  couchdb2.org2.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_couchdb2-org2
    hostname: couchdb2
    domainname: org2.example.com
    image: couchdb:3.1.1
    environment:
      - COUCHDB_USER=admin
      - COUCHDB_PASSWORD=adminpw
    volumes:
        - couchdb2-org2:/opt/couchdb/data
    networks:
      - test
      
  peer2.org2.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_peer2-org2
    hostname: peer2
    domainname: org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      # Peer specific variabes
      - CORE_PEER_ID=peer2.org2.example.com
      - CORE_PEER_ADDRESS=peer2.org2.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer2.org2.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer2.org2.example.com:7051
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_LOCALMSPID=Org2MSP
      # CouchDB related configuration
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb2.org2.example.com:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw
    depends_on:
      - couchdb2.org2.example.com
    volumes:
        - /var/run/docker.sock:/host/var/run/docker.sock
        - ./etc/peer2-org2:/etc/hyperledger/fabric
        - peer2-org2:/var/hyperledger/production
    command: peer node start
    networks:
      - test

  cli.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_cli-org1
    hostname: cli
    domainname: org1.example.com
    image: hyperledger/fabric-tools:$IMAGE_TAG
    tty: true
    stdin_open: true
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      # Peer specific variabes
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
    working_dir: /work
    command: /bin/bash
    volumes:
        - ./etc/cli-org1:/etc/hyperledger/fabric
        - ./artifacts:/work
    depends_on:
      - orderer.example.com
      - peer0.org1.example.com
    networks:
      - test

  cli.org2.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_cli-org2
    hostname: cli
    domainname: org2.example.com
    image: hyperledger/fabric-tools:$IMAGE_TAG
    tty: true
    stdin_open: true
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      # Peer specific variabes
      - CORE_PEER_ID=peer0.org2.example.com
      - CORE_PEER_ADDRESS=peer0.org2.example.com:7051
      - CORE_PEER_LOCALMSPID=Org2MSP
    working_dir: /work
    command: /bin/bash
    volumes:
        - ./etc/cli-org2:/etc/hyperledger/fabric
        - ./artifacts:/work
    depends_on:
      - orderer.example.com
      - peer0.org2.example.com
    networks:
      - test

  app.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_app-org1
    hostname: app
    domainname: org1.example.com
    build: ${APPSDIR}/basic/.
    environment:
     - MSPID=Org1MSP
     - CERTFILE=config/msp/signcerts/User1@org1.example.com-cert.pem
     - KEYSTORE=config/msp/keystore/priv_sk
     - CONNECTION_PROFILE=config/connection-org1.yaml
     - CHANNEL_NAME=test-channel
     - DISCOVERY_AS_LOCALHOST=false
    volumes:
        - ./etc/app-org1:/app/config
    depends_on:
      - orderer.example.com
      - peer0.org1.example.com
    ports:
      - 8080:8080
    networks:
      - test

  explorerdb.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_explorerdb-org1
    hostname: explorerdb
    domainname: org1.example.com
    image: hyperledger/explorer-db:latest
    environment:
      - DATABASE_DATABASE=fabricexplorer
      - DATABASE_USERNAME=hppoc
      - DATABASE_PASSWORD=password
    healthcheck:
      test: "pg_isready -h localhost -p 5432 -q -U postgres"
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - test

  explorer.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_explorer-org1
    hostname: explorer
    domainname: org1.example.com
    image: hyperledger/explorer:latest
    restart: always
    environment:
      - DATABASE_HOST=explorerdb.org1.example.com
      - DATABASE_DATABASE=fabricexplorer
      - DATABASE_USERNAME=hppoc
      - DATABASE_PASSWD=password
      - LOG_LEVEL_APP=debug
      - LOG_LEVEL_DB=debug
      - LOG_LEVEL_CONSOLE=info
      - LOG_CONSOLE_STDOUT=true
      - DISCOVERY_AS_LOCALHOST=false
    volumes:
      - ./etc/explorer-org1/config.json:/opt/explorer/app/platform/fabric/config.json
      - ./etc/explorer-org1/connection-org1.json:/opt/explorer/app/platform/fabric/connection-org1.json
      - ./etc/explorer-org1/crypto:/tmp/crypto
    ports:
      - 8081:8080
    depends_on:
      - explorerdb.org1.example.com
      - peer0.org1.example.com
      - orderer.example.com
    networks:
      - test
