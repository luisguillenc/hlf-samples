
version: '3'

volumes:
  orderer:
  peer0-org1:
  peer0-org2:

networks:
  test:

services:

  ca.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_ca-orderer
    hostname: ca
    domainname: example.com
    image: hyperledger/fabric-ca:$CA_IMAGE_TAG
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=orderer-ca
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_PORT=7054
      - FABRIC_CA_SERVER_CSR_CN=Orderer Root CA orderer-ca
      - FABRIC_CA_SERVER_CSR_HOSTS=ca.example.com
    user: "${USERID}"
#    ports:
#      - "7054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ./etc/ca-orderer:/etc/hyperledger/fabric-ca-server
    networks:
      - test

  ca.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_ca-org1
    hostname: ca
    domainname: org1.example.com
    image: hyperledger/fabric-ca:$CA_IMAGE_TAG
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=org1-ca
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_PORT=7054
      - FABRIC_CA_SERVER_CSR_CN=Org1 Root CA org1-ca
      - FABRIC_CA_SERVER_CSR_HOSTS=ca.org1.example.com
    user: "${USERID}"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ./etc/ca-org1:/etc/hyperledger/fabric-ca-server
    networks:
      - test

  ca.org2.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_ca-org2
    hostname: ca
    domainname: org2.example.com
    image: hyperledger/fabric-ca:$CA_IMAGE_TAG
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=org2-ca
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_PORT=7054
      - FABRIC_CA_SERVER_CSR_CN=Org2 Root CA org2-ca
      - FABRIC_CA_SERVER_CSR_HOSTS=ca.org2.example.com
    user: "${USERID}"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ./etc/ca-org2:/etc/hyperledger/fabric-ca-server
    networks:
      - test

  orderer.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_orderer
    hostname: orderer
    domainname: example.com
    image: hyperledger/fabric-orderer:$IMAGE_TAG
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
    command: orderer
    volumes:
        - ./etc/orderer:/etc/hyperledger/fabric
        - orderer:/var/hyperledger/production/orderer
    networks:
      - test

  peer0.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_peer0-org1
    hostname: peer0
    domainname: org1.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      # Peer specific variabes
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
        - /var/run/docker.sock:/host/var/run/docker.sock
        - ./etc/peer0-org1:/etc/hyperledger/fabric
        - peer0-org1:/var/hyperledger/production
    command: peer node start
    networks:
      - test
      
  peer0.org2.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_peer0-org2
    hostname: peer0
    domainname: org2.example.com
    image: hyperledger/fabric-peer:$IMAGE_TAG
    environment:
      #Generic peer variables
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_test
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      # Peer specific variabes
      - CORE_PEER_ID=peer0.org2.example.com
      - CORE_PEER_ADDRESS=peer0.org2.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org2.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org2.example.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org2.example.com:7051
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
        - /var/run/docker.sock:/host/var/run/docker.sock
        - ./etc/peer0-org2:/etc/hyperledger/fabric
        - peer0-org2:/var/hyperledger/production
    command: peer node start
    networks:
      - test

  cli.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_cli-org1
    hostname: cli
    domainname: org1.example.com
    image: hyperledger/fabric-tools:$IMAGE_TAG
    tty: true
    stdin_open: true
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      # Peer specific variabes
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
    working_dir: /work
    command: /bin/bash
    volumes:
        - ./etc/cli-org1:/etc/hyperledger/fabric
        - ./artifacts:/work
    depends_on:
      - orderer.example.com
      - peer0.org1.example.com
    networks:
      - test

  cli.org2.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_cli-org2
    hostname: cli
    domainname: org2.example.com
    image: hyperledger/fabric-tools:$IMAGE_TAG
    tty: true
    stdin_open: true
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      #- FABRIC_LOGGING_SPEC=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      # Peer specific variabes
      - CORE_PEER_ID=peer0.org2.example.com
      - CORE_PEER_ADDRESS=peer0.org2.example.com:7051
      - CORE_PEER_LOCALMSPID=Org2MSP
    working_dir: /work
    command: /bin/bash
    volumes:
        - ./etc/cli-org2:/etc/hyperledger/fabric
        - ./artifacts:/work
    depends_on:
      - orderer.example.com
      - peer0.org2.example.com
    networks:
      - test

  app.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_app-org1
    hostname: app
    domainname: org1.example.com
    build: ${APPSDIR}/basic/.
    environment:
     - MSPID=Org1MSP
     - CERTFILE=config/msp/signcerts/User1@org1.example.com-cert.pem
     - KEYSTORE=config/msp/keystore/priv_sk
     - CONNECTION_PROFILE=config/connection-org1.yaml
     - CHANNEL_NAME=test-channel
     - DISCOVERY_AS_LOCALHOST=false
    volumes:
        - ./etc/app-org1:/app/config
    depends_on:
      - orderer.example.com
      - peer0.org1.example.com
    ports:
      - 8080:8080
    networks:
      - test
